---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header title={SITE_TITLE} />
		<main>
		<div class="landing">
		    <img class="headshot" src="./images/me.jpeg"></img>
			<h1>AnamoDev</h1>
			<p class="headline headline--with-cursor">Making Software Better</p>
         </div>

			<h1>
				TODO: Deploy The Site to Netlify
			</h1>

        <div>
			<p>
				Welcome to the official <a href="https://astro.build/">Astro</a> blog starter template. This
				template serves as a lightweight, minimally-styled starting point for anyone looking to
				build a personal website, blog, or portfolio with Astro.
			</p>
			<p>
				This template comes with a few integrations already configured in your
				<code>astro.config.mjs</code> file. You can customize your setup with
				<a href="https://astro.build/integrations">Astro Integrations</a> to add tools like
				Tailwind, React, or Vue to your project.
			</p>
			<p>Here are a few ideas on how to get started with the template:</p>
			<ul>
				<li>Edit this page in <code>src/pages/index.astro</code></li>
				<li>Edit the site header items in <code>src/components/Header.astro</code></li>
				<li>Add your name to the footer in <code>src/components/Footer.astro</code></li>
				<li>Check out the included blog posts in <code>src/pages/blog/</code></li>
				<li>Customize the blog post page layout in <code>src/layouts/BlogPost.astro</code></li>
			</ul>

			<ul>
				<li>Remove the blog part until we need it</li>
				<li>Style the portfolio page more like the blog (ironically)</li>
			</ul>

			<p>
				Have fun! If you get stuck, remember to <a href="https://docs.astro.build/"
					>read the docs
				</a> or <a href="https://astro.build/chat">join us on Discord</a> to ask questions.
			</p>
			<p>
				Looking for a blog template with a bit more personality? Check out <a
					href="https://github.com/Charca/astro-blog-template"
					>astro-blog-template
				</a> by <a href="https://twitter.com/Charca">Maxi Ferreira</a>.
			</p>
        </div>
		</main>
		<Footer />
	</body>
</html>

<style>

.landing {
    display: grid;
	justify-items: center;
}

.headshot {
    width: 300px;
    height: 300px;
    object-fit: cover;
    object-position: 0 15%;
    border-radius: 50%;
}

.headline {
	width: 16ch;
}

p.headline.headline--with-cursor::after {
	content: '';
	position: absolute;
	margin-left: .1em;
	margin-top: .1em;
	width: 1ch;
	height: 1em;
	background-color: rgb(var(--black));
	display: inline-block;
}
</style>

<script>
	const keyFrames :string[] = [
		"M",
		"Making Software Better",
		"Making Better Software",
	];

	const textFrames: string[] = [];

	// Go through all the keyframes by two
	for (let keyFrameIndex = 0; keyFrameIndex < keyFrames.length - 1; keyFrameIndex += 1) {
		let currentKeyFrame = keyFrames[keyFrameIndex]!;
		let nextKeyFrame = keyFrames[keyFrameIndex + 1]!;

		// Find the branch point where the current keyframe text and the next keyframe text differ
		let branchPoint = 0;
		while (branchPoint <= currentKeyFrame.length && branchPoint <= nextKeyFrame.length) {
			if (currentKeyFrame[branchPoint] === nextKeyFrame[branchPoint]) {
				branchPoint += 1;
			} else {
				break;
			}
		}

		// If the branch point is behind us, this means the next keyframe has shorter text
		// So we generate the in-between frames back to branch point
		if (branchPoint < currentKeyFrame.length) {
			let branchPointOffset = currentKeyFrame.length - 1;
			while (branchPointOffset > branchPoint)
			{
				textFrames.push(currentKeyFrame.slice(0, branchPointOffset));
				branchPointOffset -= 1;
			}
		}

		// Generate the in-between frames from where we are, to the end of the next keyframe
		{
			let branchPointOffset = branchPoint;
			while (branchPointOffset <= nextKeyFrame.length) {
				textFrames.push(nextKeyFrame.slice(0, branchPointOffset));
				branchPointOffset += 1;
			}
		}
	}

	const charactersPerSecond = 13;
	const frameTime = 1000 / charactersPerSecond;

	// Animate the typing in the dom
	const headline: HTMLElement = document.querySelector(".headline.headline--with-cursor")!;
	let frameNumber = 0;
	const intervalId = setInterval(() => {
		headline.innerText = textFrames[frameNumber]!;
		frameNumber++;

		// Stop when we run out of text
		if (frameNumber === textFrames.length) {
			clearInterval(intervalId); // Stop the animation
			headline.classList.remove('headline--with-cursor'); // Remove the typing cursor
		}
	}, frameTime);

</script>