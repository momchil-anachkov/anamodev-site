---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header title={SITE_TITLE} />
		<main>
		<div class="landing">
		    <img class="headshot" src="./images/me.jpeg"></img>
			<h1>{SITE_TITLE}</h1>
			<p class="headline headline--with-cursor">Making Software Better</p>
         </div>
		</main>
		<Footer />
	</body>
</html>

<style>

.landing {
    display: grid;
	justify-items: center;
}

.headshot {
    width: 300px;
    height: 300px;
    object-fit: cover;
    object-position: 0 15%;
    border-radius: 50%;
}

.headline {
	min-height: 1lh;
	width: 16ch;
}

p.headline.headline--with-cursor::after {
	content: '';
	position: absolute;
	margin-left: .1em;
	margin-top: .1em;
	width: 1ch;
	height: 1em;
	background-color: rgb(var(--black));
	display: inline-block;
}
</style>

<script>
	const keyFrames :string[] = [
		"",
		"Making Software Better",
		"Making Better Software",
	];

	const textFrames: string[] = [];

	// Go through all the keyframes by two
	for (let keyFrameIndex = 0; keyFrameIndex < keyFrames.length - 1; keyFrameIndex += 1) {
		let currentKeyFrame = keyFrames[keyFrameIndex]!;
		let nextKeyFrame = keyFrames[keyFrameIndex + 1]!;

		// Find the branch point where the current keyframe text and the next keyframe text differ
		let branchPoint = 0;
		while (branchPoint <= currentKeyFrame.length && branchPoint <= nextKeyFrame.length) {
			if (currentKeyFrame[branchPoint] === nextKeyFrame[branchPoint]) {
				branchPoint += 1;
			} else {
				break;
			}
		}

		// If the branch point is behind us, this means the next keyframe has shorter text
		// So we generate the in-between frames back to branch point
		if (branchPoint < currentKeyFrame.length) {
			let branchPointOffset = currentKeyFrame.length - 1;
			while (branchPointOffset > branchPoint)
			{
				textFrames.push(currentKeyFrame.slice(0, branchPointOffset));
				branchPointOffset -= 1;
			}
		}

		// Generate the in-between frames from where we are, to the end of the next keyframe
		{
			let branchPointOffset = branchPoint;
			while (branchPointOffset <= nextKeyFrame.length) {
				textFrames.push(nextKeyFrame.slice(0, branchPointOffset));
				branchPointOffset += 1;
			}
		}
	}

	const charactersPerSecond = 13;
	const frameTime = 1000 / charactersPerSecond;

	// Animate the typing in the dom
	const headline: HTMLElement = document.querySelector(".headline.headline--with-cursor")!;

	let isPaused = false;
	let pauseStart = 0;
	let pauseTimer = 0;
	let pauseDurationOnKeyFrame = 1000;
	let frameNumber = 0;
	const intervalId = setInterval(() => {
		if (isPaused) {
			pauseTimer = Date.now() - pauseStart;
			if (pauseTimer > pauseDurationOnKeyFrame) {
				isPaused = false;
				pauseTimer = 0;
			}
		}

		if (isPaused) {
			return;
		}

		// Set the text for the current frame
		const text = textFrames[frameNumber]!;
		headline.innerText = text;
		frameNumber++;

		// Pause on any full keyframe for dramatic effect
		if (keyFrames.includes(text) && frameNumber > 1) {
			isPaused = true;
			pauseStart = Date.now();
		}

		// Stop when we run out of text
		if (frameNumber === textFrames.length) {
			clearInterval(intervalId); // Stop the animation
			headline.classList.remove('headline--with-cursor'); // Remove the typing cursor
		}
	}, frameTime);

</script>